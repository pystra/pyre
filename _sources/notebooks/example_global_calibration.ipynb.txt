{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fb5b1922-dbc2-4f84-a277-43cd7b4ea2a2",
   "metadata": {},
   "source": [
    "# Quick Demonstration for Global calibration of safety and combination factors\n",
    "\n",
    "Calibrate a set of safety and combination factors for two different structures identified by two different LSFs.\n",
    "\n",
    "The first LSF is given by:\n",
    "$$ z_1*R \\geq (0.4*G + 0.6*Q1 + 0.3*Q2)$$\n",
    "\n",
    "The second LSF is given by:\n",
    "$$ z_2*R \\geq (0.4*G + 0.3*Q1 + 0.6*Q2)$$\n",
    "\n",
    "Note:\n",
    "1. I think it is reasonable to assume that any global calibration exercise would contain the same load effects albeit with different nominal values.\n",
    "2. This is just a quick demonstration.\n",
    "3. The objective is also to utilize as much as existing Pystra code as possible.\n",
    "\n",
    "## Import Libraries and define utility functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e2af33ee-5e8a-44dc-bfb9-802e965452ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "import pystra as ra\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy.optimize import minimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "53d3c548-9805-4fc3-a4da-7f1fe54e35a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lsf(z, R, G, Q1, Q2, cg, c1, c2):\n",
    "    return z*R - (cg*G + c1*Q1 + c2*Q2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6913b8a7-6c19-4725-a585-6bb495c6a7a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_df_gamma(gg, g1, g2):\n",
    "    \"\"\"\n",
    "    Create a Dataframe of Gamma factors from a set of input values such that\n",
    "    it can be utilized by the respective calibration object.\n",
    "\n",
    "    \"\"\"\n",
    "    list_g = [gg, g1, g2]\n",
    "    cols = ['G', 'Q1', 'Q2']\n",
    "    idx = ['Q1_max', 'Q2_max']\n",
    "    df = pd.DataFrame(data=[list_g, list_g], columns=cols, index=idx)\n",
    "    return df\n",
    "\n",
    "def create_df_phi(phi):\n",
    "    \"\"\"\n",
    "    Create a Dataframe of Phi factors from a set of input values such that\n",
    "    it can be utilized by the respective calibration object.\n",
    "\n",
    "    \"\"\"\n",
    "    list_phi = [phi]\n",
    "    cols = ['R']\n",
    "    idx = ['Q1_max', 'Q2_max']\n",
    "    df = pd.DataFrame(data=[list_phi, list_phi], columns=cols, index=idx)\n",
    "    return df\n",
    "    \n",
    "def create_df_psi(psi1, psi2):\n",
    "    \"\"\"\n",
    "    Create a Dataframe of Psi factors from a set of input values such that\n",
    "    it can be utilized by the respective calibration object.\n",
    "\n",
    "    \"\"\"\n",
    "    list_psi1 = [1, 1, psi2]\n",
    "    list_psi2 = [1, psi1, 1]\n",
    "    cols = ['G', 'Q1', 'Q2']\n",
    "    idx = ['Q1_max', 'Q2_max']\n",
    "    df = pd.DataFrame(data=[list_psi1, list_psi2], columns=cols, index=idx)\n",
    "    return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "58c31271-2905-41f9-bfe8-dc2c9cf2c0bb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run_calib_design(dfphi, dfgamma, dfpsi, calib):\n",
    "    \"\"\"\n",
    "    Take a set of factors for a calibration object and run a design check.\n",
    "\n",
    "    \"\"\"\n",
    "    calib.df_phi = dfphi\n",
    "    calib.df_gamma = dfgamma\n",
    "    calib.df_psi = dfpsi\n",
    "    design_z = calib.get_design_param_factor()\n",
    "    design_beta = calib.calc_beta_design_param(np.max(design_z))\n",
    "    return design_beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "55bf8071-e1de-4989-a601-b156d5e66530",
   "metadata": {},
   "outputs": [],
   "source": [
    "def obj_func_global(list_factors):\n",
    "    \"\"\"\n",
    "    Objective function for minimization: weighted mean sequared error.\n",
    "    Taken from Gayton (2004) pg. 5.\n",
    "\n",
    "    Takes a set of input parameters, creates corresponding dataframes,\n",
    "    finds corresponding design reliabilities for each calibration object,\n",
    "    and returns the residual.\n",
    "    \"\"\"\n",
    "    print(list_factors)\n",
    "    gg, g1, g2, psi1, psi2, phi = list_factors\n",
    "    df_phi = create_df_phi(phi)\n",
    "    df_gamma = create_df_gamma(gg, g1, g2)\n",
    "    df_psi = create_df_psi(psi1, psi2)\n",
    "    design_beta1 = run_calib_design(df_phi, df_gamma, df_psi, calib1)\n",
    "    design_beta2 = run_calib_design(df_phi, df_gamma, df_psi, calib2)\n",
    "    list_betaj = np.concatenate([design_beta1, design_beta2])\n",
    "    list_wj = np.ones(4)\n",
    "    res = np.sum([xx * (yy-betaT)**2 for xx,yy in zip(list_wj, list_betaj)])\n",
    "    return res"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1075bdf2-29ae-4a40-b1ef-e1e3a3db51c5",
   "metadata": {},
   "source": [
    "## Set up problem input"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "40e78e6c-6cc5-41c6-a0d4-a6097ce21b88",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Set parameters for LoadCombination: Distributions and combinations\n",
    "# Annual max distributions\n",
    "Q1max = ra.Gumbel(\"Q1\", 1, 0.2)  # Imposed Load\n",
    "Q2max = ra.Gumbel(\"Q2\", 1, 0.4)  # Wind Load\n",
    "# Parameters of inferred point-in-time parents\n",
    "Q1pit = ra.Gumbel(\"Q1\", 0.89, 0.2)  # Imposed Load\n",
    "Q2pit = ra.Gumbel(\"Q2\", 0.77, 0.4)  # Wind Load\n",
    "Q_dict = {'Q1': {'max': Q1max, 'pit': Q1pit},\n",
    "          'Q2': {'max': Q2max, 'pit': Q2pit}}\n",
    "# Constant values\n",
    "cg1 = ra.Constant(\"cg\", 0.4)\n",
    "c11 = ra.Constant(\"c1\", 0.6)\n",
    "c21 = ra.Constant(\"c2\", 0.3)\n",
    "cg2 = ra.Constant(\"cg\", 0.4)\n",
    "c12 = ra.Constant(\"c1\", 0.3)\n",
    "c22 = ra.Constant(\"c2\", 0.6)\n",
    "z = ra.Constant(\"z\", 1)  # Design parameter for resistance with arbitrary default value\n",
    "\n",
    "## Define other random variables\n",
    "Rdist = ra.Lognormal(\"R\", 1.0, 0.15)  # Resistance\n",
    "Gdist = ra.Normal(\"G\", 1, 0.1)  # Permanent Load (other load variable)\n",
    "loadcombinations = {'Q1_max':['Q1'], 'Q2_max':['Q2']}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2cc2973c-6052-4854-852a-535ae67709a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Set parameters for calibration: nominal values and target Beta\n",
    "Qk = np.array([Q1max.ppf(0.98), Q2max.ppf(0.98)])\n",
    "Gk = np.array([Gdist.ppf(0.5)])\n",
    "Rk = np.array([Rdist.ppf(0.05)])\n",
    "rvs_all = ['R', 'G', 'Q1', 'Q2', 'Q3']\n",
    "dict_nom = dict(zip(rvs_all, np.concatenate([Rk, Gk, Qk])))\n",
    "betaT = 4.3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "565c9034-b4eb-4f31-822f-7f5cb61944f7",
   "metadata": {},
   "source": [
    "## Instantiate Combination and Calibration Objects"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2b2dc652-6245-48fc-84be-a93bbe8ade8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "## Instantiate LoadCombination object\n",
    "lc1 = ra.LoadCombination(lsf, Q_dict, [Gdist], [Rdist], [z, cg1, c11, c21],\n",
    "                      dict_comb_cases=loadcombinations)\n",
    "lc2 = ra.LoadCombination(lsf, Q_dict, [Gdist], [Rdist], [z, cg2, c12, c22],\n",
    "                      dict_comb_cases=loadcombinations)\n",
    "\n",
    "\n",
    "## Instantiate Calibration object\n",
    "calib1 = ra.Calibration(lc1, target_beta=betaT, dict_nom_vals=dict_nom,\n",
    "                        calib_var='z', est_method=\"matrix\", \n",
    "                        calib_method=\"optimize\", print_output=False)\n",
    "\n",
    "calib2 = ra.Calibration(lc2, target_beta=betaT, dict_nom_vals=dict_nom,\n",
    "                        calib_var='z', est_method=\"matrix\", \n",
    "                        calib_method=\"optimize\", print_output=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d0166bf0-84aa-4bac-b329-a16134b6cb20",
   "metadata": {},
   "source": [
    "## Global Optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3833a616-5528-4dcf-aba7-9eac4c5ba102",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.0371   1.069218 1.102563 0.931848 0.898165 0.846876]\n",
      "[1.03710001 1.069218   1.102563   0.931848   0.898165   0.846876  ]\n",
      "[1.0371     1.06921801 1.102563   0.931848   0.898165   0.846876  ]\n",
      "[1.0371     1.069218   1.10256301 0.931848   0.898165   0.846876  ]\n",
      "[1.0371     1.069218   1.102563   0.93184801 0.898165   0.846876  ]\n",
      "[1.0371     1.069218   1.102563   0.931848   0.89816501 0.846876  ]\n",
      "[1.0371     1.069218   1.102563   0.931848   0.898165   0.84687601]\n",
      "[1.6      1.6      1.6      1.       0.898165 0.5     ]\n",
      "[1.59999999 1.6        1.6        1.         0.898165   0.5       ]\n",
      "[1.6        1.59999999 1.6        1.         0.898165   0.5       ]\n",
      "[1.6        1.6        1.59999999 1.         0.898165   0.5       ]\n",
      "[1.6        1.6        1.6        0.99999999 0.898165   0.5       ]\n",
      "[1.6        1.6        1.6        1.         0.89816501 0.5       ]\n",
      "[1.6        1.6        1.6        1.         0.898165   0.50000001]\n",
      "[1.07781626 1.10761107 1.13854412 0.93677764 0.898165   0.82178541]\n",
      "[1.07781627 1.10761107 1.13854412 0.93677764 0.898165   0.82178541]\n",
      "[1.07781626 1.10761108 1.13854412 0.93677764 0.898165   0.82178541]\n",
      "[1.07781626 1.10761107 1.13854413 0.93677764 0.898165   0.82178541]\n",
      "[1.07781626 1.10761107 1.13854412 0.93677765 0.898165   0.82178541]\n",
      "[1.07781626 1.10761107 1.13854412 0.93677764 0.89816501 0.82178541]\n",
      "[1.07781626 1.10761107 1.13854412 0.93677764 0.898165   0.82178542]\n",
      "[1.07218891 1.09824508 1.13884648 0.93104153 0.898165   0.82448746]\n",
      "[1.07218892 1.09824508 1.13884648 0.93104153 0.898165   0.82448746]\n",
      "[1.07218891 1.09824509 1.13884648 0.93104153 0.898165   0.82448746]\n",
      "[1.07218891 1.09824508 1.13884649 0.93104153 0.898165   0.82448746]\n",
      "[1.07218891 1.09824508 1.13884648 0.93104154 0.898165   0.82448746]\n",
      "[1.07218891 1.09824508 1.13884648 0.93104153 0.89816501 0.82448746]\n",
      "[1.07218891 1.09824508 1.13884648 0.93104153 0.898165   0.82448747]\n",
      "[1.06484581 1.07658902 1.15141066 0.91182431 0.898165   0.82569767]\n",
      "[1.06484582 1.07658902 1.15141066 0.91182431 0.898165   0.82569767]\n",
      "[1.06484581 1.07658903 1.15141066 0.91182431 0.898165   0.82569767]\n",
      "[1.06484581 1.07658902 1.15141067 0.91182431 0.898165   0.82569767]\n",
      "[1.06484581 1.07658902 1.15141066 0.91182432 0.898165   0.82569767]\n",
      "[1.06484581 1.07658902 1.15141066 0.91182431 0.89816501 0.82569767]\n",
      "[1.06484581 1.07658902 1.15141066 0.91182431 0.898165   0.82569768]\n",
      "[1.058954   1.05011702 1.17239826 0.89888231 0.8890809  0.82550891]\n",
      "[1.05895401 1.05011702 1.17239826 0.89888231 0.8890809  0.82550891]\n",
      "[1.058954   1.05011703 1.17239826 0.89888231 0.8890809  0.82550891]\n",
      "[1.058954   1.05011702 1.17239827 0.89888231 0.8890809  0.82550891]\n",
      "[1.058954   1.05011702 1.17239826 0.89888232 0.8890809  0.82550891]\n",
      "[1.058954   1.05011702 1.17239826 0.89888231 0.88908091 0.82550891]\n",
      "[1.058954   1.05011702 1.17239826 0.89888231 0.8890809  0.82550892]\n",
      "[1.02470936 1.         1.38104129 0.77469261 0.80975816 0.80860797]\n",
      "[1.02470937 1.         1.38104129 0.77469261 0.80975816 0.80860797]\n",
      "[1.02470936 1.00000001 1.38104129 0.77469261 0.80975816 0.80860797]\n",
      "[1.02470936 1.         1.3810413  0.77469261 0.80975816 0.80860797]\n",
      "[1.02470936 1.         1.38104129 0.77469262 0.80975816 0.80860797]\n",
      "[1.02470936 1.         1.38104129 0.77469261 0.80975817 0.80860797]\n",
      "[1.02470936 1.         1.38104129 0.77469261 0.80975816 0.80860798]\n",
      "[1.02477757 1.         1.37201691 0.78295924 0.80637342 0.8168719 ]\n",
      "[1.02477758 1.         1.37201691 0.78295924 0.80637342 0.8168719 ]\n",
      "[1.02477757 1.00000001 1.37201691 0.78295924 0.80637342 0.8168719 ]\n",
      "[1.02477757 1.         1.37201692 0.78295924 0.80637342 0.8168719 ]\n",
      "[1.02477757 1.         1.37201691 0.78295925 0.80637342 0.8168719 ]\n",
      "[1.02477757 1.         1.37201691 0.78295924 0.80637343 0.8168719 ]\n",
      "[1.02477757 1.         1.37201691 0.78295924 0.80637342 0.81687191]\n",
      "[1.01635118 1.         1.40639935 0.76929369 0.77778072 0.83031139]\n",
      "[1.01635119 1.         1.40639935 0.76929369 0.77778072 0.83031139]\n",
      "[1.01635118 1.00000001 1.40639935 0.76929369 0.77778072 0.83031139]\n",
      "[1.01635118 1.         1.40639936 0.76929369 0.77778072 0.83031139]\n",
      "[1.01635118 1.         1.40639935 0.7692937  0.77778072 0.83031139]\n",
      "[1.01635118 1.         1.40639935 0.76929369 0.77778073 0.83031139]\n",
      "[1.01635118 1.         1.40639935 0.76929369 0.77778072 0.8303114 ]\n",
      "[1.00396629 1.         1.46883159 0.73837879 0.73984048 0.83967472]\n",
      "[1.0039663  1.         1.46883159 0.73837879 0.73984048 0.83967472]\n",
      "[1.00396629 1.00000001 1.46883159 0.73837879 0.73984048 0.83967472]\n",
      "[1.00396629 1.         1.4688316  0.73837879 0.73984048 0.83967472]\n",
      "[1.00396629 1.         1.46883159 0.7383788  0.73984048 0.83967472]\n",
      "[1.00396629 1.         1.46883159 0.73837879 0.73984049 0.83967472]\n",
      "[1.00396629 1.         1.46883159 0.73837879 0.73984048 0.83967473]\n",
      "[1.         1.         1.49695615 0.71804813 0.73342972 0.83184396]\n",
      "[1.00000001 1.         1.49695615 0.71804813 0.73342972 0.83184396]\n",
      "[1.         1.00000001 1.49695615 0.71804813 0.73342972 0.83184396]\n",
      "[1.         1.         1.49695616 0.71804813 0.73342972 0.83184396]\n",
      "[1.         1.         1.49695615 0.71804814 0.73342972 0.83184396]\n",
      "[1.         1.         1.49695615 0.71804813 0.73342973 0.83184396]\n",
      "[1.         1.         1.49695615 0.71804813 0.73342972 0.83184397]\n",
      "[1.00209308 1.         1.48211435 0.72877696 0.73681279 0.83597638]\n",
      "[1.00209309 1.         1.48211435 0.72877696 0.73681279 0.83597638]\n",
      "[1.00209308 1.00000001 1.48211435 0.72877696 0.73681279 0.83597638]\n",
      "[1.00209308 1.         1.48211436 0.72877696 0.73681279 0.83597638]\n",
      "[1.00209308 1.         1.48211435 0.72877697 0.73681279 0.83597638]\n",
      "[1.00209308 1.         1.48211435 0.72877696 0.7368128  0.83597638]\n",
      "[1.00209308 1.         1.48211435 0.72877696 0.73681279 0.83597639]\n",
      "[1.         1.         1.50625084 0.71638987 0.72293516 0.83869726]\n",
      "[1.00000001 1.         1.50625084 0.71638987 0.72293516 0.83869726]\n",
      "[1.         1.00000001 1.50625084 0.71638987 0.72293516 0.83869726]\n",
      "[1.         1.         1.50625085 0.71638987 0.72293516 0.83869726]\n",
      "[1.         1.         1.50625084 0.71638988 0.72293516 0.83869726]\n",
      "[1.         1.         1.50625084 0.71638987 0.72293517 0.83869726]\n",
      "[1.         1.         1.50625084 0.71638987 0.72293516 0.83869727]\n",
      "[1.         1.         1.50460849 0.7173585  0.72366353 0.83872497]\n",
      "[1.00000001 1.         1.50460849 0.7173585  0.72366353 0.83872497]\n",
      "[1.         1.00000001 1.50460849 0.7173585  0.72366353 0.83872497]\n",
      "[1.         1.         1.5046085  0.7173585  0.72366353 0.83872497]\n",
      "[1.         1.         1.50460849 0.71735851 0.72366353 0.83872497]\n",
      "[1.         1.         1.50460849 0.7173585  0.72366354 0.83872497]\n",
      "[1.         1.         1.50460849 0.7173585  0.72366353 0.83872498]\n",
      "[1.         1.         1.50457124 0.71738177 0.72367792 0.83872794]\n",
      "[1.00000001 1.         1.50457124 0.71738177 0.72367792 0.83872794]\n",
      "[1.         1.00000001 1.50457124 0.71738177 0.72367792 0.83872794]\n",
      "[1.         1.         1.50457125 0.71738177 0.72367792 0.83872794]\n",
      "[1.         1.         1.50457124 0.71738178 0.72367792 0.83872794]\n",
      "[1.         1.         1.50457124 0.71738177 0.72367793 0.83872794]\n",
      "[1.         1.         1.50457124 0.71738177 0.72367792 0.83872795]\n"
     ]
    }
   ],
   "source": [
    "## Run Global optimization\n",
    "# Starting values taken from results of calib1.run()\n",
    "start = [1.0371, 1.069218, 1.102563, 0.931848, 0.898165, 0.846876]\n",
    "# Specify Bounds for the respective parameters\n",
    "g_low = 1.0\n",
    "g_up = 1.6\n",
    "psi_low = 0.1\n",
    "psi_up = 1.0\n",
    "phi_low = 0.5\n",
    "phi_up = 1.0\n",
    "bnds = ((g_low, g_up), (g_low, g_up), (g_low, g_up), (psi_low, psi_up), \n",
    "        (psi_low, psi_up), (phi_low, phi_up))\n",
    "# Optimize\n",
    "result = minimize(obj_func_global, x0=start, bounds=bnds)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2671e42-92be-47e9-8443-704eed7a6a56",
   "metadata": {},
   "source": [
    "### Store results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4f70ad0c-7d12-4ec2-91df-a4c69b363cf7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.         1.         1.50457124 0.71738177 0.72367792 0.83872794]\n"
     ]
    }
   ],
   "source": [
    "factors_opt = result.x\n",
    "\n",
    "opt_res = obj_func_global(factors_opt)\n",
    "df_phi_opt = create_df_phi(factors_opt[5])\n",
    "df_gamma_opt = create_df_gamma(factors_opt[0], factors_opt[1], factors_opt[2])\n",
    "df_psi_opt = create_df_psi(factors_opt[3], factors_opt[4])\n",
    "design_beta_1_opt = run_calib_design(df_phi_opt, df_gamma_opt, df_psi_opt, calib1)\n",
    "design_beta_2_opt = run_calib_design(df_phi_opt, df_gamma_opt, df_psi_opt, calib1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e6489917-bcbb-4182-a986-3172bbd5cc81",
   "metadata": {},
   "source": [
    "### Display results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "e4e5d2c0-0dac-4510-b507-8752bd007e9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " Phi optimal = \n",
      "               R\n",
      "Q1_max  0.838728\n",
      "Q2_max  0.838728\n",
      "\n",
      " Gamma optimal = \n",
      "          G   Q1        Q2\n",
      "Q1_max  1.0  1.0  1.504571\n",
      "Q2_max  1.0  1.0  1.504571\n",
      "\n",
      " Psi optimal = \n",
      "        G        Q1        Q2\n",
      "Q1_max  1  1.000000  0.723678\n",
      "Q2_max  1  0.717382  1.000000\n",
      "\n",
      "Optimal design reliabilities for problem 1: [4.30323642 4.29676697]\n",
      "\n",
      "Optimal design reliabilities for problem 2: [4.30323642 4.29676697]\n"
     ]
    }
   ],
   "source": [
    "# Display results\n",
    "print(f'\\n Phi optimal = \\n{df_phi_opt}')\n",
    "print(f'\\n Gamma optimal = \\n{df_gamma_opt}')\n",
    "print(f'\\n Psi optimal = \\n{df_psi_opt}')\n",
    "print(f'\\nOptimal design reliabilities for problem 1: {design_beta_1_opt}')\n",
    "print(f'\\nOptimal design reliabilities for problem 2: {design_beta_2_opt}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30e420c6-6688-46ed-9513-b177180a8112",
   "metadata": {},
   "source": [
    "Note that the optimal design reliabilities can be slightly less than the target reliability because there is no constraint on setting $\\beta_j\\geq \\beta_T$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "32e9d4ad-d433-42d3-ac34-379cd5de2adc",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pystra",
   "language": "python",
   "name": "pystra"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
