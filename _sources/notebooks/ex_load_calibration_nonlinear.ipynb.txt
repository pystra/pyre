{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0ae62a58-e2fc-434b-8c33-589df187cb4e",
   "metadata": {},
   "source": [
    "# Load Calibration for Non Linear Limit State Functions (LSFs)\n",
    "This tutorial demonstrates how `Pystra` can calibrate safety and combination factors for Non-Linear limit state functions.\n",
    "\n",
    "## Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1488fb2a-563f-471d-b356-6e28f389722b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pystra as ra\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "13abaefd-bbd2-4037-9aa5-81a2bb2f9da2",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Define the limit state function for calibration\n",
    "The LSF to be supplied in `LoadCombination` can be any valid *Pystra* LSF with one additional argument: a scalar design parameter for a random variable (generally, the resistance). Note that:\n",
    "1. The design parameter must be specified as a `Pystra` constant with any arbitrary default value, such as `1.0`.\n",
    "2. Only a single design parameter for the resistance random variable can be calibrated at a time.\n",
    "\n",
    "Keeping with the `LoadCombination` example, the design parameter for resistance, denoted $z$, is added to the LSF. The LSF contains additional random variables `wR` and `wS` to account for the uncertainties within the resistance and the load effects, respectively. The non-linearity of the LSF is evident as the degree of random variables in each term of the LSF is two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b92f5192-a31c-4c7b-aeb3-4a18cf4b700a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lsf(z, wR, wS, R, Q1, Q2):\n",
    "    gX = z * wR * R - wS * (Q1 + Q2)\n",
    "    return gX"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c7cef467-bcb9-4a35-8106-a70a4abecd95",
   "metadata": {},
   "source": [
    "## Define the Load and Resistance distributions\n",
    "\n",
    "Next follow the creation of load combination object, as explained for the `LoadCombination` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5888a653-6715-487d-8412-73631b886c30",
   "metadata": {},
   "outputs": [],
   "source": [
    "wR = ra.Lognormal(\"wR\", 1.0, 0.05)\n",
    "wS = ra.Lognormal(\"wS\", 1.0, 0.10)\n",
    "R = ra.Normal(\"R\", 60, 6)  # [units]\n",
    "Q1_max = ra.Normal(\"Q1\", 30, 3)  # [units]\n",
    "Q2_max = ra.Normal(\"Q2\", 20, 2)  # [units]\n",
    "Q1_pit = ra.Normal(\"Q1\", 15, 3)  # [units]\n",
    "Q2_pit = ra.Normal(\"Q2\", 10, 2)  # [units]\n",
    "\n",
    "z = ra.Constant(\"z\", 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "59df970b-fb97-49a9-96f8-e880ec4e9cf4",
   "metadata": {},
   "source": [
    "## Set up Load Combinations\n",
    "\n",
    "### Specify nominal values & combinations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "5504c4f6-e243-4ca8-89f8-ff4b6dd87d3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "rvs_all = ['wR', 'wS', 'R', 'Q1', 'Q2']\n",
    "dict_nom = dict(zip(rvs_all, np.array([1.0, 1.0, R.ppf(0.05), \n",
    "                                             Q1_max.ppf(0.95),\n",
    "                                             Q2_max.ppf(0.95)])))\n",
    "\n",
    "Q_dict = {'Q1': {'max': Q1_max, 'pit': Q1_pit},\n",
    "      'Q2': {'max': Q2_max, 'pit': Q2_pit}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1aedee37-ee6c-4663-86a9-cf7d7d76149b",
   "metadata": {},
   "outputs": [],
   "source": [
    "loadcombinations = {'Q1_max':['Q1'], 'Q2_max':['Q2']}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2cd45a8d-2b04-469c-8956-ef9404cad2d5",
   "metadata": {},
   "source": [
    "### Instantiate `LoadCombination` object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "7c61bfa4-acda-4df2-9cb8-188579cc5cbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "lc = ra.LoadCombination(lsf, dict_dist_comb=Q_dict, list_dist_other=[wS],\n",
    "                         list_dist_resist=[R, wR], list_const = [z], \n",
    "                         dict_comb_cases=loadcombinations)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48582495-40b4-499a-bdbe-4659ea8b5787",
   "metadata": {},
   "source": [
    "Note that since `wR` is associated with the resistance, it is specified in `list_dist_resist`; while `wS` is specified in `list_dist_other` as it is associated with the load effects but it's not a load combination variable."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d4dc55e1-d16b-4f11-a626-34471d0a2200",
   "metadata": {},
   "source": [
    "## Load calibration"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "efb954f2-3dad-407f-b9a7-063e19ad2cc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "======================================================\n",
      "X* = \n",
      "             R    wR   wS     Q1     Q2     z\n",
      "Q1_max  44.40  0.95  1.2  33.81  11.69  1.30\n",
      "Q2_max  44.76  0.95  1.2  19.16  21.85  1.16\n",
      "\n",
      "phi =  \n",
      "            R    wR\n",
      "Q1_max  0.89  0.95\n",
      "Q2_max  0.89  0.95\n",
      "\n",
      "gamma = \n",
      "          wS    Q1    Q2\n",
      "Q1_max  1.2  0.97  0.94\n",
      "Q2_max  1.2  0.97  0.94\n",
      "\n",
      "psi =  \n",
      "          wS    Q1    Q2\n",
      "Q1_max  1.0  1.00  0.54\n",
      "Q2_max  1.0  0.57  1.00\n",
      "======================================================\n"
     ]
    }
   ],
   "source": [
    "betaT = 3.7\n",
    "calib1 = ra.Calibration(lc, target_beta=betaT, dict_nom_vals=\n",
    "                                dict_nom, calib_var='z', \n",
    "                                est_method=\"matrix\", calib_method=\"optimize\")\n",
    "calib1.run()\n",
    "\n",
    "calib1.print_detailed_output()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0973e49f-8fac-4edc-a1de-1993de59a621",
   "metadata": {},
   "source": [
    "### Design Check"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9dc8086b-8d89-41a7-bcdf-9b5d90d8c8df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Design reliabilities = [3.7  4.28]\n",
      "Design Check = [ True  True]\n"
     ]
    }
   ],
   "source": [
    "design_z1 = calib1.get_design_param_factor()\n",
    "design_beta1 = calib1.calc_beta_design_param(np.max(design_z1))\n",
    "print(f\"Design reliabilities = {design_beta1.round(2)}\")\n",
    "print(f\"Design Check = {design_beta1.round(2)>=betaT}\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:pystra-dev]",
   "language": "python",
   "name": "conda-env-pystra-dev-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
