{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6e11b992-aa12-455e-9293-c58ea93190ff",
   "metadata": {},
   "source": [
    "# Load Combinations\n",
    "*Pystra* includes the class `LoadCombination` which can be used to analyse a structural reliability problem for different load cases. This example demonstrates the use of load combination cases with *Pystra*."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ad051e1-2a2a-4f90-b5e5-0827693e79bb",
   "metadata": {},
   "source": [
    "## Example\n",
    "This demonstration problem is adopted from Example 4 pp 190-1 from Sorensen, J.D. (2004), *Notes in Structural Reliability Theory And Risk Analysis*. The parameter values are slightly modified for demonstration.\n",
    "\n",
    "### Import Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "0c7b323d-8cf5-480f-91cc-f35a5c4e4035",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pystra as ra\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f08f35b7-1161-4c23-8968-1f0fe8a4512a",
   "metadata": {},
   "source": [
    "### Define the limit state function\n",
    "The LSF to be supplied in `LoadCombination` can be any valid *Pystra* LSF. Here we show how random variables and even constants (e.g. `cg`) can be passed through as *Pystra* objects, or can be hard-coded into the LSF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4f3638db-52cd-41d7-87b4-ee9e32b55b9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lsf(R, G, Q1, Q2, cg):\n",
    "    return R - (cg*G + 0.8*Q1 + 0.2*Q2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "109206fc-f860-4bdb-88d9-45febddd4f17",
   "metadata": {},
   "source": [
    "### Define the Load and Resistance distributions\n",
    "We define the distributions of the loads for the load combinations. Some loads will be time-invariant (e.g. permanent loads), while some will be combination random variables (e.g. winds, imposed loads). These combination loads require the definition of a point-in-time (`'pit'`) distribution and a maximum (`'max'`) distribtribution (typically annual maximum). Note that *Pystra* has built in distribution objects to convert between the two: `MaxParent` and `Maximum`.\n",
    "\n",
    "For the combination loads, we define a dictionary which contains a key for each variable in the LSF, and a dictionary with the `pit` and `max` key values being the corresponding *Pystra* distribution objects."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37fd36ed-69f3-4cda-b8e6-a39ab9a77c53",
   "metadata": {},
   "source": [
    "Define the annual max distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8bcb7ba2-9040-4b72-8eff-7df2670188b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1max = ra.Gumbel(\"Q1\", 1, 0.2)  # Imposed Load\n",
    "Q2max = ra.Gumbel(\"Q2\", 1, 0.4)  # Wind Load"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1d7ca83b-2a26-40f4-a9a2-eef85e1b8a01",
   "metadata": {},
   "source": [
    "Next specifcy the parameters of inferred point-in-time parent distributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "73337d04-0df0-4976-a98c-b2d422168c4d",
   "metadata": {},
   "outputs": [],
   "source": [
    "Q1pit = ra.Gumbel(\"Q1\", 0.89, 0.2)  # Imposed Load\n",
    "Q2pit = ra.Gumbel(\"Q2\", 0.77, 0.4)  # Wind Load\n",
    "Q_dict = {'Q1': {'max': Q1max, 'pit': Q1pit}, \n",
    "          'Q2': {'max': Q2max, 'pit': Q2pit}}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fed703fe-5962-417e-bf91-aa3e577eb56e",
   "metadata": {},
   "source": [
    "And define any constants to be passed through"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bfe3da3c-139f-4b82-981e-40aa805be81e",
   "metadata": {},
   "outputs": [],
   "source": [
    "cg = ra.Constant(\"cg\", 0.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cde4241e-7f8a-42eb-99cc-1609d40e6007",
   "metadata": {},
   "source": [
    "Finally, define any other random variables in the problem"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "17279cad-5005-4b99-8d4b-1fb8a64d872f",
   "metadata": {},
   "outputs": [],
   "source": [
    "Rdist = ra.Lognormal(\"R\", 2.0, 0.15)  # Resistance\n",
    "Gdist = ra.Normal(\"G\", 1, 0.1)  # Permanent Load (Other load variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b414e150-2d67-4530-8e2c-424529901260",
   "metadata": {},
   "source": [
    "### Specify load combination cases\n",
    "For this problem, in addition to the permanent loads, we're interested in investigating the reliabilities for several load combinations:\n",
    "1. `Q1Q2_max`: Where both `Q1` and `Q2` maximum distributions are considered simultaneously, as an obvious conservative estimation.\n",
    "2. `Q1_max`: `Q1` is maximum and  `Q2` is the point-in-time distribution.\n",
    "3. `Q2_max`: `Q1` is the point-in-time distribution and  `Q2` is maximum.\n",
    "\n",
    "We define a dictionary with the relevant loadcase names and corresponding variable names form the LSF."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "0482ebcb-28b3-4c77-b51e-3a0da5ad5d3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "loadcombinations = {'Q1Q2_max':['Q1', 'Q2'], 'Q1_max':['Q1'], 'Q2_max':['Q2']}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "387c5752-a879-4df2-84eb-f70cac91e6c0",
   "metadata": {},
   "source": [
    "**Note**: The specification of this dictionary is optional. By default, `LoadCombination` assumes one combination load to act at its maximum in a load case, while the others are considered to be the point-in-time distribution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ccc43bd-2433-4a25-af26-d7876450bb3f",
   "metadata": {},
   "source": [
    "### Specify user-defined correlation (optional)\n",
    "The user can also specify a user-defined correlation matrix for the random variables of the reliability problem as a DataFrame."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ec40a02f-d9db-4cde-8d32-c0ded9bcf5e4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     Q1   Q2    R    G\n",
      "Q1  1.0  0.8  0.0  0.0\n",
      "Q2  0.8  1.0  0.0  0.0\n",
      "R   0.0  0.0  1.0  0.0\n",
      "G   0.0  0.0  0.0  1.0\n"
     ]
    }
   ],
   "source": [
    "label_rvs = [\"Q1\", \"Q2\", \"R\", \"G\"]\n",
    "corr = np.eye(len(label_rvs))\n",
    "df_corr = pd.DataFrame(data=corr, columns=label_rvs, index=label_rvs)\n",
    "corr_Q1Q2 = 0.8\n",
    "df_corr.loc[\"Q1\", \"Q2\"] = corr_Q1Q2\n",
    "df_corr.loc[\"Q2\", \"Q1\"] = corr_Q1Q2\n",
    "print(df_corr)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d479d27-a2db-45fa-be11-e0f9e4a39b9d",
   "metadata": {},
   "source": [
    "### Specify user-defined analysis options (optional)\n",
    "The user can also specify a user-defined correlation Pystra `AnalysisOptions` object for the reliability analysis too. In this tutorial we will set error thresholds and change the default transform method to use singular value decomposition."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "7ef924b2-0b79-4074-9a83-1f1da0f9c812",
   "metadata": {},
   "outputs": [],
   "source": [
    "options = ra.AnalysisOptions()\n",
    "options.setE1(1e-3)\n",
    "options.setE2(1e-3)\n",
    "options.setTransform(\"svd\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39a4d05d-8cfe-4787-bb0a-5d78d08acdd1",
   "metadata": {},
   "source": [
    "### Instantiate `LoadCombination` object\n",
    "`LoadCombination` class requires specification of combination distributions as a dictionary, while the other distributions (permanent loads and resistances) are specified as a list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6e48d8ca-c19d-4d9b-8b2e-7a11c3242eb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "lc = ra.LoadCombination(lsf=lsf, dict_dist_comb=Q_dict, list_dist_resist=[Rdist], list_dist_other=[Gdist],\n",
    "                        corr=df_corr, list_const=[cg], opt=options, dict_comb_cases=loadcombinations)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9578baec-1799-4f66-b6b9-68a55e47775b",
   "metadata": {},
   "source": [
    "### Analyse Load Cases\n",
    "\n",
    "Use a list to keep track of each `Form` object outputted:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "de1a1263-99bf-404b-a95b-ed11a10858f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "form = 3*[None]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d9a18ec7-0d7e-4f45-8c5f-95532470cace",
   "metadata": {},
   "source": [
    "#### Load Case 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "05489e20-e752-4aa2-be71-8ca9445730a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================\n",
      "FORM\n",
      "======================================================\n",
      "Pf              \t 2.5348733315e-02\n",
      "BetaHL          \t 1.9540317148\n",
      "Model Evaluations \t 38\n",
      "------------------------------------------------------\n",
      "Variable   \t    U_star \t       X_star \t     alpha\n",
      "R          \t -1.818038 \t     1.898248 \t -0.930293\n",
      "G          \t -0.659741 \t     1.018495 \t -0.337834\n",
      "Q1         \t  0.184954 \t     1.423639 \t +0.095051\n",
      "Q2         \t -0.208597 \t     1.759687 \t -0.106715\n",
      "cg         \t       --- \t     0.400000 \t       ---\n",
      "======================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lc_idx = 0\n",
    "form[lc_idx] = lc.run_reliability_case(lcn='Q1Q2_max')\n",
    "form[lc_idx].showDetailedOutput()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63bff80e-6d3b-4dbe-a6ff-30c4f5bdbfc6",
   "metadata": {},
   "source": [
    "#### Load Case 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5544eaf5-830b-49a3-81eb-02da51b69f44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================\n",
      "FORM\n",
      "======================================================\n",
      "Pf              \t 1.9624337657e-02\n",
      "BetaHL          \t 2.0615701821\n",
      "Model Evaluations \t 49\n",
      "------------------------------------------------------\n",
      "Variable   \t    U_star \t       X_star \t     alpha\n",
      "R          \t -1.926554 \t     1.896315 \t -0.934503\n",
      "G          \t -0.673345 \t     1.018964 \t -0.326631\n",
      "Q1         \t  0.189636 \t     1.461699 \t +0.091993\n",
      "Q2         \t -0.221604 \t     1.596853 \t -0.107490\n",
      "cg         \t       --- \t     0.400000 \t       ---\n",
      "======================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lc_idx = 1\n",
    "form[lc_idx] = lc.run_reliability_case(lcn='Q1_max')\n",
    "form[lc_idx].showDetailedOutput()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2b7cfb0b-1f98-4832-8e07-d97e36beed3a",
   "metadata": {},
   "source": [
    "#### Load Case 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "232b0f83-716b-4162-88d1-fe712c163c5e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================\n",
      "FORM\n",
      "======================================================\n",
      "Pf              \t 1.5511691106e-02\n",
      "BetaHL          \t 2.1567726618\n",
      "Model Evaluations \t 49\n",
      "------------------------------------------------------\n",
      "Variable   \t    U_star \t       X_star \t     alpha\n",
      "R          \t -2.022994 \t     1.894827 \t -0.937968\n",
      "G          \t -0.683828 \t     1.019274 \t -0.317075\n",
      "Q1         \t  0.192740 \t     1.386755 \t +0.089372\n",
      "Q2         \t -0.233228 \t     1.888565 \t -0.108134\n",
      "cg         \t       --- \t     0.400000 \t       ---\n",
      "======================================================\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lc_idx = 2\n",
    "form[lc_idx] = lc.run_reliability_case(lcn='Q2_max')\n",
    "form[lc_idx].showDetailedOutput()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d88c0f0-d53e-4c72-a57c-9e6cc0abe763",
   "metadata": {},
   "source": [
    "#### Display reliability per load combination"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "279402ea-7a7f-4fe4-a196-066e297af632",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Q1Q2_max: β = 1.95\n",
      "Q1_max: β = 2.06\n",
      "Q2_max: β = 2.16\n"
     ]
    }
   ],
   "source": [
    "for lc,β in zip([k for k in loadcombinations.keys()], [f.beta for f in form]):\n",
    "    print(f\"{lc}: β = {β[0]:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5a86d63-da6b-43ea-acd0-10e1daa90c37",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Distributions for Load Combinations\n",
    "\n",
    "`Pystra` includes a range of tools to enable the calculation of load combinations due to variable loads:\n",
    "\n",
    "- **Zero-Inflated** Distributions allow for a probability of non-occurence of a load\n",
    "- **Maximum** Distributions allow the distribution of maxima of a supplied parent or point-in-time distribution\n",
    "- **MaxParent** Distribution allows the determination of the point-in-time distribution from a supplied maximum."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ebceb6c-8ac2-4ca4-8c3d-9b34c9e1cb66",
   "metadata": {},
   "source": [
    "### Zero-Inflated Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "4e164a22-f9d4-4c48-b181-41b7e4d351bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "zin = ra.ZeroInflated('Q',ra.Gumbel(\"G\", 0.5, 0.2),p=0.9)\n",
    "zin.zero_tol = 1e-2\n",
    "x = np.linspace(-0.5,1.5,1000)\n",
    "pdf = zin.pdf(x)\n",
    "cdf = zin.cdf(x)\n",
    "u = np.linspace(0,1,10001)\n",
    "ppf = zin.ppf(u)\n",
    "fig,axs = plt.subplot_mosaic([['a','c'],['b','c']],sharex=True)\n",
    "ax = axs['a']\n",
    "ax.plot(x,pdf)\n",
    "ax.set_ylabel('$f(x)$')\n",
    "ax.grid()\n",
    "ax = axs['b']\n",
    "ax.plot(x,cdf,label='Direct from CDF')\n",
    "ax.plot(ppf,u,'r:',label='From Inverse CDF')\n",
    "ax.set_ylabel('$F(x)$')\n",
    "ax.set_xlabel('$x$')\n",
    "ax.legend(loc='center right')\n",
    "ax.grid()\n",
    "ax = axs['c']\n",
    "ax.plot(x,-np.log(-np.log(cdf)))\n",
    "ax.set_ylabel('$-log[-log[F(x)]]$')\n",
    "ax.set_xlabel('$x$')\n",
    "ax.grid()\n",
    "plt.tight_layout();\n",
    "#fig.set_layout('tight');"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "51831dfb-1f4c-4ad3-b27d-0b17f550fec6",
   "metadata": {},
   "source": [
    "### Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "01be04dd-28bc-4ac6-beb0-07357351da52",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lsf(R,G,Q):\n",
    "    return R - (G + Q)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "a84bd24f-c19c-4097-803f-f74deaa139db",
   "metadata": {},
   "outputs": [],
   "source": [
    "def reliability(p=0.0):\n",
    "    ls = ra.LimitState(lsf)\n",
    "    sm = ra.StochasticModel()\n",
    "    sm.addVariable(ra.Lognormal(\"R\", 6.0,0.15))\n",
    "    sm.addVariable(ra.Normal(\"G\", 4.5, 0.2))\n",
    "    \n",
    "    g = ra.Gumbel(\"Q\", 0.5, 0.2)\n",
    "    if p == 1.0:\n",
    "        sm.addVariable(ra.Constant(\"Q\",0.0))\n",
    "    elif p == 0.0:\n",
    "        sm.addVariable(g)\n",
    "    else:\n",
    "        zig = ra.ZeroInflated(\"Q\",g,p=p)\n",
    "        sm.addVariable(zig)\n",
    "    \n",
    "    form = ra.Form(sm,ls)\n",
    "    form.run()\n",
    "    \n",
    "    return form"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "75b7635f-2bec-4532-b240-d47b2558109d",
   "metadata": {},
   "outputs": [],
   "source": [
    "betas = []\n",
    "ps = np.linspace(0,1.0,101)\n",
    "for p in ps:\n",
    "    form = reliability(p=p)\n",
    "    betas.append(form.beta)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "c2befd1d-780e-4295-bc3b-a01c958024f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig,ax = plt.subplots()\n",
    "ax.plot(ps,betas,'r.:')\n",
    "ax.set_xlabel('Probability of zero variable load, $p$')\n",
    "ax.set_ylabel('Reliability index, $β$')\n",
    "ax.grid();"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pystra",
   "language": "python",
   "name": "pystra"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
