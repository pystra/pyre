{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6dfe6c74-fda2-4d9a-b605-5208390bddf3",
   "metadata": {},
   "source": [
    "# Direct Differentiation Method\n",
    "\n",
    "By default, the FORM algorithm uses a Forward Finite Difference (FFD) scheme to determine the gradient of the limit state function. However, in some cases, the derivative of the limit state function with respect to each of its parameters will be available; either as a closed form expression, or as an output from another algorithm (e.g. the [sensitivity commands](https://openseespydoc.readthedocs.io/en/latest/src/senscmds.html) in OpenSeesPy). In such cases, a computational saving can be made, and can be significant, most especially for large complex finite element analyses.\n",
    "\n",
    "This example demonstrates the use of *Pystra*'s DDM algorithm for a simple closed-form limit state function; and the speed-up possible for even this simple case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b47cd618-6180-4d5f-9719-bd4bd32ab566",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pystra as ra\n",
    "import numpy as np\n",
    "import timeit"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ad20328-ba91-41cc-b02c-5fc07bd688b8",
   "metadata": {},
   "source": [
    "Define the limit state function and its gradient. Return both the evaluation of the limit state function, and the gradient vector. Also allow for the limit state function to be called in a vectorized manner, so in the following function the $Xi,\\ i \\in \\{1,...,6\\}$ may be passed with dimension $n\\times 1$, so that the returned `G` is size ${n\\times 1}$ and `grad_G` is size ${6\\times n}$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "59600817-fd5b-4098-a331-20da885c36b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def lsf(r, X1, X2, X3, X4, X5, X6):\n",
    "    \"\"\"\n",
    "    Calrel example from FERUM\n",
    "    \"\"\"\n",
    "    G = (\n",
    "        r\n",
    "        - X2 / (1000 * X3)\n",
    "        - (X1 / (200 * X3)) ** 2\n",
    "        - X5 / (1000 * X6)\n",
    "        - (X4 / (200 * X6)) ** 2\n",
    "    )\n",
    "    grad_G = np.array(\n",
    "        [\n",
    "            -X1 / (20000 * X3**2),\n",
    "            -1 / (1000 * X3),\n",
    "            (20 * X2 * X3 + X1**2) / (20000 * X3**3),\n",
    "            -X4 / (20000 * X6**2),\n",
    "            -1 / (1000 * X6),\n",
    "            (20 * X5 * X6 + X4**2) / (20000 * X6**3),\n",
    "        ]\n",
    "    )\n",
    "    return G, grad_G"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2337bcd9-270d-41a4-9e29-f8ecec92df5c",
   "metadata": {},
   "source": [
    "Set up a generic function that establishes and runs the model according to the differentiation type passed `diff_mode`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1974b199-c807-4c72-b841-3615d05965cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def run(diff_mode):\n",
    "    limit_state = ra.LimitState(lsf)\n",
    "\n",
    "    # Set some options (optional)\n",
    "    options = ra.AnalysisOptions()\n",
    "    options.setPrintOutput(False)\n",
    "    options.setDiffMode(diff_mode)\n",
    "\n",
    "    stochastic_model = ra.StochasticModel()\n",
    "\n",
    "    # Define random variables\n",
    "    stochastic_model.addVariable(ra.Lognormal(\"X1\", 500, 100))\n",
    "    stochastic_model.addVariable(ra.Lognormal(\"X2\", 2000, 400))\n",
    "    stochastic_model.addVariable(ra.Uniform(\"X3\", 5, 0.5))\n",
    "    stochastic_model.addVariable(ra.Lognormal(\"X4\", 450, 90))\n",
    "    stochastic_model.addVariable(ra.Lognormal(\"X5\", 1800, 360))\n",
    "    stochastic_model.addVariable(ra.Uniform(\"X6\", 4.5, 0.45))\n",
    "\n",
    "    # Define constants\n",
    "    stochastic_model.addVariable(ra.Constant(\"r\", 1.7))\n",
    "\n",
    "    stochastic_model.setCorrelation(\n",
    "        ra.CorrelationMatrix(\n",
    "            [\n",
    "                [1.0, 0.3, 0.2, 0, 0, 0],\n",
    "                [0.3, 1.0, 0.2, 0, 0, 0],\n",
    "                [0.2, 0.2, 1.0, 0, 0, 0],\n",
    "                [0, 0, 0, 1.0, 0.3, 0.2],\n",
    "                [0, 0, 0, 0.3, 1.0, 0.2],\n",
    "                [0, 0, 0, 0.2, 0.2, 1.0],\n",
    "            ]\n",
    "        )\n",
    "    )\n",
    "\n",
    "    # Set up FORM analysis\n",
    "    form = ra.Form(\n",
    "        analysis_options=options,\n",
    "        stochastic_model=stochastic_model,\n",
    "        limit_state=limit_state,\n",
    "    )\n",
    "    # Run it\n",
    "    form.run()\n",
    "    return form"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86615e04-b399-4624-a8ce-91844d1a8d3f",
   "metadata": {},
   "source": [
    "Call the default FFD method:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e3321ab9-97b8-4a96-96c6-207537366d08",
   "metadata": {},
   "outputs": [],
   "source": [
    "ffd_count = 0\n",
    "def run_ffd():\n",
    "    global ffd_count\n",
    "    form = run(\"ffd\")\n",
    "    ffd_count += form.getNoFunctionCalls()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb32b2af-7e22-4023-8fc0-2b8d654a2262",
   "metadata": {},
   "source": [
    "And the DDM, which makes used of the `grad_G` returned from the `lsf`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a3d643a8-80a6-4885-9914-51622dc1984e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ddm_count = 0\n",
    "def run_ddm():\n",
    "    global ddm_count\n",
    "    form = run(\"ddm\")\n",
    "    ddm_count += form.getNoFunctionCalls()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "913f96dc-3540-4180-8ab6-3f20efc9f57a",
   "metadata": {},
   "source": [
    "Finally run both 100 times and compare the executation speed difference:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bcbe6ca4-0f04-4e2e-9499-88bde96fd834",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total time taken (s):\n",
      "FFD: 3.8152463799342513; DDM: 3.757767920847982\n",
      "Number of function evaluations:\n",
      "FFD: 8500; DDM: 4300\n",
      "Average time per call (s):\n",
      "FFD: 0.03815246379934251; DDM: 0.03757767920847982\n",
      "DDM speed-up: 1.02\n"
     ]
    }
   ],
   "source": [
    "number = 100\n",
    "time_ffd = timeit.timeit(stmt=run_ffd, number=number)\n",
    "time_ddm = timeit.timeit(stmt=run_ddm, number=number)\n",
    "\n",
    "print(\"Total time taken (s):\")\n",
    "print(f\"FFD: {time_ffd}; DDM: {time_ddm}\")\n",
    "print(\"Number of function evaluations:\")\n",
    "print(f\"FFD: {ffd_count}; DDM: {ddm_count}\")\n",
    "print(\"Average time per call (s):\")\n",
    "print(f\"FFD: {time_ffd/number}; DDM: {time_ddm/number}\")\n",
    "print(f\"DDM speed-up: {time_ffd/time_ddm:.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3e8957a-505e-4eb2-a4a8-4cd57e52f0d6",
   "metadata": {},
   "source": [
    "For the present problem the speed-up is not very significant, but for more complex models, it can be, as may be apparent from the difference in the number of function calls."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pystra",
   "language": "python",
   "name": "pystra"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
